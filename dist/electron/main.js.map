{"version":3,"sources":["webpack://referencer-electron/./api/main.ts","webpack://referencer-electron/external \"electron\"","webpack://referencer-electron/webpack/bootstrap"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","defaultWindowOpt","width","height","minWidth","minHeight","this","app","setListeners","createWindow","mainWindow","windowOptions","newWindow","newWindowOptions","BrowserWindow","session","webContents","loadURL","secondaryWindows","push","checkDevTools","window","on","process","platform","quit"],"mappings":"uBAAA,E,WCAAA,EAAOC,QAAUC,QAAQ,cCCrBC,EAA2B,GFD/B,EEIA,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,QFrBf,MAkDO,IAhDP,WAYC,aAVQ,KAAAQ,iBAAoD,CACrDC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,KAOjBC,KAAKC,IAAM,EAAAA,IACXD,KAAKE,eAgCP,OA7BS,YAAAC,aAAR,SAAqBC,EAAqBC,GACzC,IACIC,EADEC,EAAmBF,UAAiBL,KAAKL,iBAE3CS,GACHE,EAAY,IAAI,EAAAE,cAAcD,GAC9BP,KAAKS,QAAUH,EAAUI,YAAYD,QACrCH,EAAUK,QAAQ,yBAClBX,KAAKI,WAAaE,IAElBA,EAAY,IAAI,EAAAE,cAAcD,GAC9BP,KAAKY,iBAAiBC,KAAKP,IAE5BN,KAAKc,cAAcR,IAGZ,YAAAQ,cAAR,SAAsBC,KAId,YAAAb,aAAR,sBACCF,KAAKC,IACHe,GAAG,SAAS,WAAM,SAAKb,cAAa,MACpCa,GAAG,qBAAqB,WACC,WAArBC,QAAQC,UAAuB,EAAKjB,IAAIkB,UAE5CH,GAAG,YAAY,WACV,EAAKZ,YAAY,EAAKD,cAAa,OAG5C,EA9CA,K","file":"main.js","sourcesContent":["import { app, App, BrowserWindow, Session, BrowserWindowConstructorOptions } from 'electron';\n\nclass Main {\n\tprivate app: App;\n\tprivate defaultWindowOpt: BrowserWindowConstructorOptions = {\n        width: 800,\n        height: 600,\n        minWidth: 400,\n        minHeight: 350\n    };\n\tprivate mainWindow!: BrowserWindow;\n\tprivate secondaryWindows!: Array<BrowserWindow>;\n\tprivate session!: Session;\n\n\tconstructor() {\n\t\tthis.app = app;\n\t\tthis.setListeners();\n\t}\n\n\tprivate createWindow(mainWindow: boolean, windowOptions?: BrowserWindowConstructorOptions): void {\n\t\tconst newWindowOptions = windowOptions ?? this.defaultWindowOpt;\n\t\tlet newWindow: BrowserWindow;\n\t\tif (mainWindow) {\n\t\t\tnewWindow = new BrowserWindow(newWindowOptions);\n\t\t\tthis.session = newWindow.webContents.session;\n\t\t\tnewWindow.loadURL('http://localhost:3000');\n\t\t\tthis.mainWindow = newWindow;\n\t\t} else {\n\t\t\tnewWindow = new BrowserWindow(newWindowOptions);\n\t\t\tthis.secondaryWindows.push(newWindow)\n\t\t}\n\t\tthis.checkDevTools(newWindow);\n\t}\n\n\tprivate checkDevTools(window: BrowserWindow): void {\n\t\tprocess.env.NODE_ENV === 'development' && window.webContents.openDevTools();\n\t}\n\n\tprivate setListeners(): void {\n\t\tthis.app\n\t\t\t.on('ready', () => this.createWindow(true))\n\t\t\t.on('window-all-closed', () => {\n\t\t\t\tif (process.platform !== 'darwin') this.app.quit();\n\t\t\t})\n\t\t\t.on('activate', () => {\n\t\t\t\tif (!this.mainWindow) this.createWindow(true);\n\t\t\t})\n\t}\n}\n\n(() => new Main())();\n","module.exports = require(\"electron\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"sourceRoot":""}